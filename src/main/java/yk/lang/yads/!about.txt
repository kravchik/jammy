
+null
+enums
+escape \' \" \n \t in strings!
+don't escape ' in "" and vice versa
+multi line strings with '' and ""
+ '=' instead of ':'?
+ '{}' instead of '()'?
+mvn
 apache commons
 junit
+deploy as public maven artifact
+serializeClass (ie without ClassName{...}, only inner part)
+rename all YADS... -> Yads...
+YadsAware for yadsSerialize, yadsSerializeKnownType
+range = 2 //without {} if constructor needs one argument
+in 'a = b' - use 'constructor(b)' if available for type? Also 'a = b, c' is 'constructor(a, b)'
+don't serialize type name if known
+short lines without \n s
+namespaces in deserialization
+shorten lines by Array element (not only by key value)
+don't use quotes in serializer if string is without spaces or parentheses
+YCollection
+with/without
-add imports when custom serializer
-add default semantics for generating constructor
-define line width for short lines (so I can consider text input width when generating configs)
-serializer - don't generate import for field types (if field type == value type) (deserializer doesn't needs it)
-Range{0} - doesn't work if not imported (though its don't needs to because of field type)
sort map and set while serializing

19.06.17
sorted out yads / yads2
added some methods to yads

03.03.18
-reading of unknown class with multiple imports
-serialize/deserialize list conformity
symmetry in serialize/deserialize

05.03.18
-ser/des list/map API
  logic, tests

06.03.18
texts
tests

//TODO

file with import but without data not reading as map

Yads1
  ? special words ?
    class SomeClass{} - to explicitly state class name
    al{} hm{} - to distinguish between empty map and list
    ?? [:] - map  (or (:) )
  calc element types from list type
  don't serialize fields with default values
  ? remove NamedMap AND add map to YadsClass (get rid of tuples)
  ? don't interpret string as class name if no such class ?

Yads2
  [] - for arrays
  {} - for maps
  () - for classes
  new class is the same as function call, so () is for classes
  "abs((a + b) + abs(c + d))" - need to handle parentheses ("classes without name"?)
  [abc (def)] - array of string and nameless class or array with instance of abc class?
    CANT HAVE NAMELESS CLASSES except when type of class is known (typed array, value for class property)
    must have a priority - classes first. If in rare need string+nameless-class - use ["abc" (def)]... not obvious
    or can we ever have nameless classes? Maybe when we know type by context only
    or can we ever have nameless classes IN ARRAYS? only for strict-type arrays
  Class(x): x is pares? list of args?
    Vec3f(x y) is args for constructor
      Some(x y (z)) "x, y(z)" or "x, y, (z)"?
  ? Class{} - for fields values
  ? Class[] - for "setList" (some default function for GUI)
  ? Class() - for constructor args
  ? VBox{width=10 height=10}[element1 element2]
    [VBox(){}[]] is [class, array] or [class] or [class, map, array]?

  better YadsClass - separate list and map
  more symbols as identifiers
  parentheses

Yads2b
  () for args and lists
  {} - for maps and class bodies



??  {ClassName key:value}

// Set {} for sets, HashMap {} for specific map class, etc...
references (^? @?)
"." in name

detect unused imports

move 'class name' to serialization level
  leave parser level with just curly braces
-line numbers in errors

-serialize Set

YadsSerializer.serializeInner( some string ) causes stack overflow
prop = new SomeClass(){{ }} not serializing
add clone(), test it
YadsSerializer.deserializeClass((Class)t.getClass(), YadsSerializer.serialize(t))
  t is integer
infer type from constructor types (if called as constructor)

-serialize properties + constructor for YadsAware
-javaccless simple parser (to simplify creation for other languages)
  -or just use ANTLR to generate parser for different platforms
  -try to implement YadsSerializer with ANTLR

-reflector can't find constructor when casting is needed (int->float for ex.)
serialize without {} when needed
? forbid range={2} and range={1,2} ? (to force range=2 and range=1,2)
  ? or look at line-width or complexity to switch {} on and off?
  ? or forbid commas, because "a, b" is very not same as "a"
-serialize package OR package.class (when needed)

-symbols like +-*/, etc - must be valid identifiers
-parser generates simple lists only, not maps or YASClasses (REMOVE, conflicts with 'line numbers')
-map {key=value} and YadsClass is just one of many possible post-processings
?support complex keys?

?unary minus is regexp of number or grammar rule? Consider method calls and other operators
? why do we need escape \t also?
-optimize not earlier then requested
-code-generate optimized (de)serializer for custom classes


