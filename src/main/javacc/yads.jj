options {
  STATIC = false;    
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(YadsParser)

package yk.lang.yads;
import yk.jcommon.collections.Tuple;
import yk.jcommon.collections.YList;
import yk.jcommon.utils.Util;

import java.io.ByteArrayInputStream;
import java.io.UnsupportedEncodingException;

import static yk.jcommon.collections.YArrayList.al;

public class YadsParser {
    public static YList parseList(String s) {
        try {
            return new YadsParser(new ByteArrayInputStream(s.getBytes("UTF-8"))).yadList();
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        } catch (ParseException e) {
            throw new RuntimeException(e);
        }
    }

    public static Object parseClass(String s) {
        try {
            return new YadsParser(new ByteArrayInputStream(s.getBytes("UTF-8"))).yadsClass();
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        } catch (ParseException e) {
            throw new RuntimeException(e);
        }
    }

    //public static <T> T parseClass(Class<? extends T> clazz, String s) {
    //    try {
    //        return new YADSParser(new ByteArrayInputStream(s.getBytes("UTF-8"))).yadClass();
    //    } catch (UnsupportedEncodingException | ParseException e) {
    //        throw new RuntimeException(e);
    //    }
    //}
    //

    //TODO parseClass


}

PARSER_END(YadsParser)


SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : /* OPERATORS */
{
  < LPAREN: "(" >
 |< RPAREN: ")" >
 |< LBRACE: "{" >
 |< RBRACE: "}" >
 |< COMMA: "," >
 |< TRUE: "true" >
 |< FALSE: "false" >
 |< MINUS: "-" >
// |< DECIMAL_LITERAL: ["0"-"9"] (["0"-"9"])* >
}


TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:("-")?(
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  )>
|
  < #DECIMAL_LITERAL: ("-")?(["1"-"9"] (["0"-"9"])* )>
|
  < #HEX_LITERAL: ("-")?("0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ )>
|
  < #OCTAL_LITERAL: ("-")?("0" (["0"-"7"])* )>
|
  < FLOATING_POINT_LITERAL:("-")?(
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
)  >
|
  < #EXPONENT: ("-")?(["e","E"] (["+","-"])? (["0"-"9"])+) >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
|
  < STRING_LITERAL_2:
      "'"
      (   (~["'","\\"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "'"
  >
}


TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff",
       ".",
       "^"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

YList yadList():
{YList result = al();String key; Object value;}
{
    (LOOKAHEAD(2)
    (
    key = <IDENTIFIER>.image
    |
    key = string()
    )
    "="
    value = yadElement1()      {result.add(new Tuple(key, value));}
    |
    value = yadElement1()          {result.add(value);}
    )*
    {return result;}
}

Object yadElement1():
{Object value;}
{

    (
    //LOOKAHEAD(2)
    value = commedClass()
    //|
    //value = yadElement()
    )
    {return value;}
}


Object yadElement():
{Object o;String s;}
{
    (
    LOOKAHEAD(2) o = yadsClass()
    |
    s = <INTEGER_LITERAL>.image {if (s.toLowerCase().endsWith("l")) o = Long.parseLong(s.substring(0, s.length()-1)); else o = Integer.parseInt(s);}//TODO depends on type!
    |
    s = <FLOATING_POINT_LITERAL>.image {if (s.toLowerCase().endsWith("d")) o = Double.parseDouble(s.substring(0, s.length()-1)); else o = Float.parseFloat(s);}//TODO depends on type!
    |
    o = string()
    |
    s = <IDENTIFIER>.image {if ("null".equals(s)) o = null; else o = s;}
    |
    <TRUE> {o = true;}
    |
    <FALSE> {o = false;}
    )
    {return "null".equals(o) ? null : o;}
}

String string():
{Object o;String s;}
{
    (
    s = <STRING_LITERAL>.image {s = Util.UNESCAPE_YADS_DOUBLE_QUOTES.translate(s.substring(1, s.length() - 1));}
    |
    s = <STRING_LITERAL_2>.image {s = Util.UNESCAPE_YADS_SINGLE_QUOTES.translate(s.substring(1, s.length() - 1));}
    )
    {return s;}
}

Object commedClass() :
{YList values = al(); Object o;}
{
    o = yadElement()  {values.add(o);}
    (
    ","
    o = yadElement()  {values.add(o);}
    )*
    {return values.size() > 1 ? new YadsClass(null, values) : values.get(0);}
}



YadsClass yadsClass():
{String s = null;YList l;}
{
    (s = <IDENTIFIER>.image)?
    "{"
    l = yadList()
    "}"
    {return new YadsClass(s, l);}
}




